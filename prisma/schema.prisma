// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") //from the env file
}

//defining a user model
// model User {
//   id           Int      @id @default(autoincrement())
//   email        String   @unique
//   name         String
//   followers    Int      @default(0)
//   isActive     Boolean  @default(true)
//   registeredAt DateTime @default(now()) //now() is another built in function in prisma
// }

//properties or fields of the model with their type
//we can optionally apply one or more attribute(like @id) for a field
//@id attr is to say that the id field uniquely identifies each user
//@default attr is to give a default value to the field
//search 'prisma models' for more sophisticated types and r/n ships'

//defining product model
// model Product {
//   id    Int    @id @default(autoincrement())
//   name  String
//   price Float
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// this is to store the user's session in our db
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
}

// ? - optional ... why b/c if a user signs in with google, for the password field will not be set

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
